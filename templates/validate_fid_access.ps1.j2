$timestamp = Get-Date -Format "MM/dd HH:mm:ss"
$logPath = "{{ cc_path }}playbook_runtime.log"

# Log helper
function LogInfo($message) {
    Add-Content -Path $logPath -Value "$timestamp INFO   :...security_manager: $message"
}
function LogError($message) {
    Add-Content -Path $logPath -Value "$timestamp ERROR  :...security_manager: $message"
}

LogInfo "Validating FID user access permissions"

# Extract username from FID
$fidUser = "{{ fid }}"
LogInfo "Original FID: '$fidUser'"

if ($fidUser -contains "/") {
    $fidUser = $fidUser.Split("/")[1]
    LogInfo "Extracted username from domain format: '$fidUser'"
} elseif ($fidUser -contains "@") {
    $fidUser = $fidUser.Split("@")[0]
    LogInfo "Extracted username from email format: '$fidUser'"
} else {
    LogInfo "Using username as-is: '$fidUser'"
}

try {
    LogInfo "Checking if user '$fidUser' exists..."

    # Try Get-LocalUser first
    try {
        $user = Get-LocalUser -Name $fidUser -ErrorAction Stop
        LogInfo "FID user '$fidUser' found via Get-LocalUser"
    } catch {
        LogInfo "Get-LocalUser failed, trying WMI method..."
        $user = Get-WmiObject -Class Win32_UserAccount -Filter "Name='$fidUser'" -ErrorAction Stop
        if ($user) {
            LogInfo "FID user '$fidUser' found via WMI"
        } else {
            throw "User '$fidUser' not found on system"
        }
    }

    LogInfo "Retrieving ACL for {{ cc_path }}"
    $acl = Get-Acl "{{ cc_path }}"
    $hasAllow = $false
    $hasDeny = $false

    foreach ($access in $acl.Access) {
        if ($access.IdentityReference.Value -match "$fidUser") {
            LogInfo "Found ACL entry for '$($access.IdentityReference)': Rights=$($access.FileSystemRights), Type=$($access.AccessControlType)"

            if ($access.AccessControlType -eq "Deny" -and (
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Write -or
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Modify -or
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::FullControl
            )) {
                $hasDeny = $true
                break
            }

            if ($access.AccessControlType -eq "Allow" -and (
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Write -or
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::Modify -or
                $access.FileSystemRights -band [System.Security.AccessControl.FileSystemRights]::FullControl
            )) {
                $hasAllow = $true
            }
        }
    }

    if ($hasDeny) {
        throw "Explicit Deny ACE detected for '$fidUser'"
    }

    if (-not $hasAllow) {
        throw "No explicit Allow access found for '$fidUser'"
    }

    LogInfo "FID user '$fidUser' has explicit Allow permissions to write/modify"
    Write-Output "SUCCESS: FID user '$fidUser' validated and has access."
    Remove-Item -Path $MyInvocation.MyCommand.Path -Force
    exit 0

} catch {
    $errorMsg = $_.Exception.Message
    LogError "FID access validation failed: $errorMsg"

    # New: Log the entire $Error collection if any
    if ($Error.Count -gt 0) {
        LogError "PowerShell error stack trace:"
        foreach ($err in $Error) {
            LogError "$($err.ToString())"
        }
    }

    $failureMsg = "ERROR: FID user '$fidUser' does not have access to '{{ cc_path }}' - $errorMsg"
    LogError $failureMsg

    Write-Output $failureMsg

    $env:FID_ACCESS_ERROR = $failureMsg
    Remove-Item -Path $MyInvocation.MyCommand.Path -Force
    exit 1
}

